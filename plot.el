(require 'svg)
(require 'dash)
(require 'org-plot)

(defun org-plot/svg ()
  (interactive)
  (org-plot/goto-nearest-table)
  (let* ((table (org-table-to-lisp))
         (x (-map 'string-to-number (-map 'car table)))
         (y (-map 'string-to-number (-map 'cadr table))))
    (pop-to-buffer "*org-plot*" nil)
    (plot/plot (-zip x y))))

(defun plot/plot (points)
  (let* ((svg (svg-create 400 250))
         (rad 2)
         (width 400)
         (height 250))
    (plot/scatter-pixel svg rad (plot/point-to-pixel width height points))
    (svg-insert-image svg)))

(defun plot/fun (fun xmin xmax dx)
  (let* ((points (number-sequence xmin xmax dx)))
    (plot/plot (-zip points (-map fun points)))))

(defun plot/point-to-pixel (width height points)
  (let* ((xs (-map (lambda (z) (car z)) points))
         (ys (-map (lambda (z) (cdr z)) points))
         (xmax (-max xs))
         (xmin (-min xs))
         (ymax (-max ys))
         (ymin (-min ys))
         (dx (- xmax xmin))
         (dy (- ymax ymin))
         (xp (-map (lambda (x) (* width (/ (- x xmin) dx))) xs))
         (yp (-map (lambda (y) (* height (- 1 (/ (- y ymin) dy)))) ys)))
    (-zip xp yp)))

(defun plot/scatter-pixel (svg rad points)
  (-map (lambda (y) (svg-circle svg (car y) (cdr y) rad)) points))


(plot/plot (-zip (number-sequence 0 6 0.1) (-map (lambda (x) (sin (* 2 x))) (number-sequence 0 6 0.1))))
    
(plot/fun (lambda (x) (* x x)) 0 2 0.1)
